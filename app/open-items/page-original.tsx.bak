'use client';

import React, { useEffect, useMemo, useState } from "react";
import { motion } from "framer-motion";
import { Download, Filter, RefreshCw, ArrowUpDown, Upload, FileText } from "lucide-react";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
} from "recharts";
import { useSession } from 'next-auth/react';
import AuthGuard from '@/lib/auth-guard';
import NavBar from '@/components/nav-bar';

interface OpenItem {
  id: string;
  title: string;
  description?: string;
  assignee?: string;
  priority?: string;
  status: string;
  createdAt: string;
  updatedAt?: string;
  closedAt?: string;
  issueType?: string;
  labels?: string;
  epic?: string;
  sprint?: string;
  storyPoints?: number;
  dueDate?: string;
  resolution?: string;
  reporter?: string;
  reportDate?: string;
}

const isClosed = (s = "") => s.toLowerCase() === "closed" || s.toLowerCase() === "done" || s.toLowerCase() === "resolved" || s.toLowerCase() === "complete" || s.toLowerCase() === "finished";
const isOpen = (s = "") => ["to do", "todo", "in progress", "inprogress", "hold", "blocked", "backlog", "open"].includes(s.toLowerCase());
const fmt = (d: string | null | undefined) => (d ? new Date(d).toLocaleDateString() : "—");

const ranges = [
  { label: "Last 7 days", days: 7 },
  { label: "Last 15 days", days: 15 },
  { label: "Last 30 days", days: 30 },
];

function getRange(days: number) {
  const end = new Date();
  end.setHours(23, 59, 59, 999);
  const start = new Date();
  start.setDate(start.getDate() - (days - 1));
  start.setHours(0, 0, 0, 0);
  return { start, end };
}

export default function OpenItemsPage() {
  const { data: session } = useSession();
  const [items, setItems] = useState<OpenItem[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [startDate, setStartDate] = useState(getRange(7).start);
  const [endDate, setEndDate] = useState(getRange(7).end);
  const [query, setQuery] = useState("");
  const [selectedRange, setSelectedRange] = useState("7");
  const [uploadFile, setUploadFile] = useState<File | null>(null);
  const [uploading, setUploading] = useState(false);
  const [uploadMessage, setUploadMessage] = useState("");

  // Get current date for page title
  const currentDate = new Date().toISOString().slice(0, 10);
  const isAdmin = session?.user?.role === 'ADMIN';

  async function fetchData() {
    setLoading(true);
    setError("");
    try {
      const url = new URL('/api/open-items', window.location.origin);
      if (startDate) url.searchParams.set("start", startDate.toISOString());
      if (endDate) url.searchParams.set("end", endDate.toISOString());
      if (query) url.searchParams.set("search", query);
      
      const res = await fetch(url.toString());
      if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);
      const data = await res.json();
      setItems(Array.isArray(data) ? data : []);
    } catch (e) {
      setError("Failed to load data from server");
      console.error('Error fetching data:', e);
    } finally {
      setLoading(false);
    }
  }

  async function handleFileUpload() {
    if (!uploadFile) return;
    
    setUploading(true);
    setUploadMessage("");
    
    try {
      const formData = new FormData();
      formData.append('file', uploadFile);
      
      const res = await fetch('/api/open-items/import', {
        method: 'POST',
        body: formData,
      });
      
      const result = await res.json();
      
      if (result.success) {
        setUploadMessage(`Successfully imported ${result.count} items`);
        setUploadFile(null);
        // Refresh data
        await fetchData();
      } else {
        setUploadMessage(`Import failed: ${result.error}`);
      }
    } catch (error) {
      setUploadMessage(`Upload error: ${error instanceof Error ? error.message : 'Unknown error'}`);
    } finally {
      setUploading(false);
    }
  }

  useEffect(() => {
    fetchData();
  }, [startDate?.toISOString(), endDate?.toISOString()]);

  const filtered = useMemo(() => {
    const s = startDate ? startDate.getTime() : -Infinity;
    const e = endDate ? endDate.getTime() : Infinity;
    const q = query.trim().toLowerCase();
    return (items || []).filter((it) => {
      const times = [it.createdAt, it.updatedAt, it.closedAt].filter(Boolean).map((d) => new Date(d!).getTime());
      const t = times.length ? Math.max(...times) : 0;
      const inRange = t >= s && t <= e;
      const matchesQuery = !q || [it.title, it.assignee, it.priority, it.status]
        .filter(Boolean)
        .map(String)
        .some((v) => v.toLowerCase().includes(q));
      return inRange && matchesQuery;
    });
  }, [items, startDate, endDate, query]);

  const openItems = useMemo(
    () => filtered.filter((it) => isOpen(it.status) || (!isClosed(it.status) && !it.closedAt)),
    [filtered]
  );
  const closedItems = useMemo(
    () => filtered.filter((it) => isClosed(it.status) || !!it.closedAt),
    [filtered]
  );

  const countBy = (items: OpenItem[], keyFn: (item: OpenItem) => string) => {
    const m = new Map();
    for (const it of items) {
      const k = keyFn(it) ?? "Unknown";
      m.set(k, (m.get(k) || 0) + 1);
    }
    return Array.from(m, ([name, value]) => ({ name, value }));
  };

  const byAssignee = useMemo(() => countBy(openItems, (it) => it.assignee || "Unassigned"), [openItems]);
  const byPriority = useMemo(() => countBy(openItems, (it) => it.priority || "Unspecified"), [openItems]);
  const openClosed = useMemo(
    () => [
      { name: "Open", value: openItems.length },
      { name: "Closed", value: closedItems.length },
    ],
    [openItems.length, closedItems.length]
  );

  function exportCurrent() {
    const rows = filtered.map((item) => ({
      id: item.id,
      title: item.title,
      assignee: item.assignee,
      priority: item.priority,
      status: item.status,
      createdAt: item.createdAt,
      updatedAt: item.updatedAt,
      closedAt: item.closedAt,
    }));
    const blob = new Blob([JSON.stringify(rows, null, 2)], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `open-items-${new Date().toISOString().slice(0, 10)}.json`;
    a.click();
    URL.revokeObjectURL(url);
  }

  function handleRangeChange(value: string) {
    setSelectedRange(value);
    const { start, end } = getRange(parseInt(value, 10));
    setStartDate(start);
    setEndDate(end);
  }

  return (
    <AuthGuard>
      <NavBar />
      <div className="min-h-screen w-full bg-gray-50">
        <div className="mx-auto max-w-7xl p-4 sm:p-6 lg:p-8">
        <header className="mb-6 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
          <motion.h1 layout className="text-2xl font-semibold tracking-tight">
            Open Items ({currentDate})
          </motion.h1>
          <div className="flex flex-wrap gap-2">
            <Input
              placeholder="Search title, assignee, priority, status…"
              value={query}
              onChange={(e) => setQuery(e.target.value)}
              className="w-64"
            />
            <Button variant="secondary" onClick={exportCurrent}>
              <Download className="mr-2 h-4 w-4" /> Export View
            </Button>
            {isAdmin && (
              <div className="flex gap-2">
                <Input
                  type="file"
                  accept=".csv"
                  onChange={(e) => setUploadFile(e.target.files?.[0] || null)}
                  className="w-64"
                />
                <Button 
                  onClick={handleFileUpload} 
                  disabled={!uploadFile || uploading}
                  variant="outline"
                >
                  <Upload className="mr-2 h-4 w-4" /> 
                  {uploading ? 'Uploading...' : 'Import CSV'}
                </Button>
              </div>
            )}
          </div>
        </header>

        {uploadMessage && (
          <div className={`mb-4 p-3 rounded-md ${uploadMessage.includes('Successfully') ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
            {uploadMessage}
          </div>
        )}

        {/* Filters */}
        <Card className="mb-6 shadow-sm">
          <CardHeader className="pb-2">
            <CardTitle className="flex items-center gap-2 text-lg">
              <Filter className="h-5 w-5"/>Filters
            </CardTitle>
          </CardHeader>
          <CardContent className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
            <div className="flex items-center gap-2">
              <div className="flex flex-col">
                <label className="text-sm text-gray-600">Start</label>
                <Input 
                  type="date" 
                  value={startDate.toISOString().slice(0,10)} 
                  onChange={(e)=>setStartDate(new Date(e.target.value))} 
                />
              </div>
              <div className="flex flex-col">
                <label className="text-sm text-gray-600">End</label>
                <Input 
                  type="date" 
                  value={endDate.toISOString().slice(0,10)} 
                  onChange={(e)=>{
                    const d = new Date(e.target.value); 
                    d.setHours(23,59,59,999); 
                    setEndDate(d);
                  }} 
                />
              </div>
              <Button variant="outline" onClick={()=>fetchData()} disabled={loading}>
                <RefreshCw className={`mr-2 h-4 w-4 ${loading ? "animate-spin" : ""}`} /> Apply
              </Button>
            </div>
            <div className="flex flex-col">
              <label className="text-sm text-gray-600">Quick Range</label>
              <Select value={selectedRange} onValueChange={handleRangeChange}>
                <SelectTrigger className="w-[180px]">
                  <SelectValue placeholder="Select range" />
                </SelectTrigger>
                <SelectContent>
                  {ranges.map(r => (
                    <SelectItem key={r.days} value={String(r.days)}>{r.label}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            {error && (<div className="col-span-full text-sm text-amber-600">{error}</div>)}
          </CardContent>
        </Card>

        {/* Charts */}
        <div className="mb-6 grid gap-4 lg:grid-cols-3">
          <Card className="shadow-sm">
            <CardHeader className="pb-0">
              <CardTitle className="text-base">Open vs Closed</CardTitle>
            </CardHeader>
            <CardContent className="h-56">
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie 
                    data={openClosed} 
                    dataKey="value" 
                    nameKey="name" 
                    outerRadius={70} 
                    label={({name, value}) => `${name}: ${value}`}
                    fill="#8884d8"
                  />
                  <Tooltip />
                </PieChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>

          <Card className="shadow-sm">
            <CardHeader className="pb-0">
              <CardTitle className="text-base">Open by Assignee</CardTitle>
            </CardHeader>
            <CardContent className="h-56">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart data={byAssignee} margin={{ top: 8, right: 16, left: 0, bottom: 8 }}>
                  <XAxis 
                    dataKey="name" 
                    tick={{ fontSize: 12 }} 
                    angle={-20} 
                    height={50} 
                    interval={0} 
                  />
                  <YAxis allowDecimals={false} />
                  <Tooltip />
                  <Bar dataKey="value" fill="#8884d8" />
                </BarChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>

          <Card className="shadow-sm">
            <CardHeader className="pb-0">
              <CardTitle className="text-base">Open by Priority</CardTitle>
            </CardHeader>
            <CardContent className="h-56">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart data={byPriority} margin={{ top: 8, right: 16, left: 0, bottom: 8 }}>
                  <XAxis dataKey="name" tick={{ fontSize: 12 }} />
                  <YAxis allowDecimals={false} />
                  <Tooltip />
                  <Bar dataKey="value" fill="#8884d8" />
                </BarChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>
        </div>

        <Section
          title={`Open Items (${openItems.length})`}
          subtitle="Showing To Do, In Progress, Hold, and other non-closed statuses within the selected period. Sort any column as needed."
        >
          <ItemTable items={openItems} />
        </Section>

        <Section
          title={`Closed Items (${closedItems.length})`}
          subtitle="Resolved/Closed items within the selected period. Sort any column as needed."
        >
          <ItemTable items={closedItems} />
        </Section>
        </div>
      </div>
    </AuthGuard>
  );
}

function Section({ title, subtitle, children }: { title: string; subtitle?: string; children: React.ReactNode }) {
  return (
    <Card className="mb-6 shadow-sm">
      <CardHeader>
        <CardTitle className="text-lg">{title}</CardTitle>
        {subtitle ? (
          <p className="text-sm text-gray-600">{subtitle}</p>
        ) : null}
      </CardHeader>
      <CardContent>{children}</CardContent>
    </Card>
  );
}

function StatusBadge({ status }: { status: string }) {
  const s = (status || "").toLowerCase();
  let variant: "secondary" | "outline" | "default" = "secondary";
  if (isOpen(s)) variant = "outline";
  if (isClosed(s)) variant = "default";
  return <Badge variant={variant} className="capitalize">{status || "Unknown"}</Badge>;
}

function SortButton({ label, active, direction, onClick }: { 
  label: string; 
  active: boolean; 
  direction: string; 
  onClick: () => void; 
}) {
  return (
    <button 
      onClick={onClick} 
      className={`flex items-center gap-1 ${active ? "text-gray-900" : "text-gray-600"} hover:text-gray-900`}
    >
      <span className="font-medium">{label}</span>
      <ArrowUpDown className={`h-3.5 w-3.5 ${active ? "opacity-100" : "opacity-60"}`} />
      <span className="sr-only">Sort</span>
    </button>
  );
}

function ItemTable({ items }: { items: OpenItem[] }) {
  const [sortKey, setSortKey] = useState<keyof OpenItem>("createdAt");
  const [sortDir, setSortDir] = useState<"asc" | "desc">("desc"); // default newest → oldest

  const sorted = useMemo(() => {
    const arr = [...items];
    const coerce = (v: any) => (v == null ? "" : v);
    arr.sort((a, b) => {
      let av, bv;
      switch (sortKey) {
        case "title":
          av = coerce(a.title)?.toString().toLowerCase();
          bv = coerce(b.title)?.toString().toLowerCase();
          break;
        case "assignee":
          av = coerce(a.assignee)?.toString().toLowerCase();
          bv = coerce(b.assignee)?.toString().toLowerCase();
          break;
        case "priority":
          av = priorityRank(coerce(a.priority));
          bv = priorityRank(coerce(b.priority));
          break;
        case "status":
          av = statusRank(coerce(a.status));
          bv = statusRank(coerce(b.status));
          break;
        case "createdAt":
        default:
          av = a.createdAt ? new Date(a.createdAt).getTime() : 0;
          bv = b.createdAt ? new Date(b.createdAt).getTime() : 0;
      }
      const cmp = av < bv ? -1 : av > bv ? 1 : 0;
      return sortDir === "asc" ? cmp : -cmp;
    });
    return arr;
  }, [items, sortKey, sortDir]);

  function toggleSort(key: keyof OpenItem) {
    setSortKey((prevKey) => {
      if (prevKey === key) {
        setSortDir((d) => (d === "asc" ? "desc" : "asc"));
        return prevKey;
      }
      setSortDir(key === "createdAt" ? "desc" : "asc");
      return key;
    });
  }

  return (
    <div className="overflow-x-auto">
      <table className="w-full border-collapse rounded-xl bg-white text-sm shadow-sm">
        <thead>
          <tr className="bg-gray-100 text-left">
            <th className="p-3">
              <SortButton 
                label="Created" 
                active={sortKey === "createdAt"} 
                direction={sortDir} 
                onClick={() => toggleSort("createdAt")} 
              />
            </th>
            <th className="p-3">
              <SortButton 
                label="Title" 
                active={sortKey === "title"} 
                direction={sortDir} 
                onClick={() => toggleSort("title")} 
              />
            </th>
            <th className="p-3">
              <SortButton 
                label="Assignee" 
                active={sortKey === "assignee"} 
                direction={sortDir} 
                onClick={() => toggleSort("assignee")} 
              />
            </th>
            <th className="p-3">
              <SortButton 
                label="Priority" 
                active={sortKey === "priority"} 
                direction={sortDir} 
                onClick={() => toggleSort("priority")} 
              />
            </th>
            <th className="p-3">
              <SortButton 
                label="Status" 
                active={sortKey === "status"} 
                direction={sortDir} 
                onClick={() => toggleSort("status")} 
              />
            </th>
          </tr>
        </thead>
        <tbody>
          {sorted.length === 0 ? (
            <tr><td colSpan={5} className="p-6 text-center text-gray-500">No items.</td></tr>
          ) : (
            sorted.map((it) => (
              <tr key={it.id} className="border-t hover:bg-gray-50">
                <td className="p-3 whitespace-nowrap">{fmt(it.createdAt)}</td>
                <td className="p-3 min-w-[20rem]">{it.title}</td>
                <td className="p-3">{it.assignee || "Unassigned"}</td>
                <td className="p-3">{it.priority || "Unspecified"}</td>
                <td className="p-3"><StatusBadge status={it.status} /></td>
              </tr>
            ))
          )}
        </tbody>
      </table>
    </div>
  );
}

// rank helpers to make sorting friendlier
function priorityRank(p = ""): number {
  const x = p.toLowerCase();
  const order = ["highest", "critical", "high", "medium", "low", "lowest"]; // tweak as needed
  const i = order.indexOf(x);
  return i === -1 ? 999 : i;
}

function statusRank(s = ""): number {
  const x = s.toLowerCase();
  const order = ["to do", "todo", "in progress", "hold", "blocked", "backlog", "resolved", "done", "closed"]; // open-ish to closed-ish
  const i = order.indexOf(x);
  return i === -1 ? 999 : i;
}